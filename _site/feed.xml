<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yan Blog</title>
    <description>代码编织梦想，程序创造未来</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 09 Sep 2019 20:56:20 +0800</pubDate>
    <lastBuildDate>Mon, 09 Sep 2019 20:56:20 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>网络模型及协议相关（应用层）</title>
        <description>&lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#域名系统&quot;&gt;域名系统&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#文件传送协议&quot;&gt;文件传送协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#动态主机配置协议&quot;&gt;动态主机配置协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#远程登录协议&quot;&gt;远程登录协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#电子邮件协议&quot;&gt;电子邮件协议&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-smtp&quot;&gt;1. SMTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-pop3&quot;&gt;2. POP3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-imap&quot;&gt;3. IMAP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#常用端口&quot;&gt;常用端口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web-页面请求过程&quot;&gt;Web 页面请求过程&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-dhcp-配置主机信息&quot;&gt;1. DHCP 配置主机信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-arp-解析-mac-地址&quot;&gt;2. ARP 解析 MAC 地址&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-dns-解析域名&quot;&gt;3. DNS 解析域名&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-http-请求页面&quot;&gt;4. HTTP 请求页面&lt;/a&gt;
&lt;!-- GFM-TOC --&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;域名系统&quot;&gt;域名系统&lt;/h1&gt;

&lt;p&gt;DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。&lt;/p&gt;

&lt;p&gt;域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/b54eeb16-0b0e-484c-be62-306f57c40d77.jpg&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。&lt;/li&gt;
  &lt;li&gt;区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;文件传送协议&quot;&gt;文件传送协议&lt;/h1&gt;

&lt;p&gt;FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。&lt;/li&gt;
  &lt;li&gt;数据连接：用来传送一个文件数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/03f47940-3843-4b51-9e42-5dcaff44858b.jpg&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/be5c2c61-86d2-4dba-a289-b48ea23219de.jpg&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。&lt;/p&gt;

&lt;h1 id=&quot;动态主机配置协议&quot;&gt;动态主机配置协议&lt;/h1&gt;

&lt;p&gt;DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。&lt;/p&gt;

&lt;p&gt;DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。&lt;/p&gt;

&lt;p&gt;DHCP 工作过程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。&lt;/li&gt;
  &lt;li&gt;DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。&lt;/li&gt;
  &lt;li&gt;如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。&lt;/li&gt;
  &lt;li&gt;DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/23219e4c-9fc0-4051-b33a-2bd95bf054ab.jpg&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;远程登录协议&quot;&gt;远程登录协议&lt;/h1&gt;

&lt;p&gt;TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。&lt;/p&gt;

&lt;p&gt;TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。&lt;/p&gt;

&lt;h1 id=&quot;电子邮件协议&quot;&gt;电子邮件协议&lt;/h1&gt;

&lt;p&gt;一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。&lt;/p&gt;

&lt;p&gt;邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/7b3efa99-d306-4982-8cfb-e7153c33aab4.png&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-smtp&quot;&gt;1. SMTP&lt;/h2&gt;

&lt;p&gt;SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/ed5522bb-3a60-481c-8654-43e7195a48fe.png&quot; width=&quot;&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-pop3&quot;&gt;2. POP3&lt;/h2&gt;

&lt;p&gt;POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。&lt;/p&gt;

&lt;h2 id=&quot;3-imap&quot;&gt;3. IMAP&lt;/h2&gt;

&lt;p&gt;IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。&lt;/p&gt;

&lt;h1 id=&quot;常用端口&quot;&gt;常用端口&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;应用&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;应用层协议&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;端口号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;传输层协议&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;域名解析&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DNS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP/TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;长度超过 512 字节时使用 TCP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;动态主机配置协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DHCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;67/68&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;简单网络管理协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SNMP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;161/162&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UDP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;文件传送协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20/21&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;控制连接 21，数据连接 20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;远程终端协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TELNET&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;超文本传送协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;简单邮件传送协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SMTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;邮件读取协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;POP3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;110&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;网际报文存取协议&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IMAP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;143&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;web-页面请求过程&quot;&gt;Web 页面请求过程&lt;/h1&gt;

&lt;h2 id=&quot;1-dhcp-配置主机信息&quot;&gt;1. DHCP 配置主机信息&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:FF，将广播到与交换机连接的所有设备。&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-arp-解析-mac-地址&quot;&gt;2. ARP 解析 MAC 地址&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:&lt;zero-width space=&quot;&quot;&gt;FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/zero-width&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-dns-解析域名&quot;&gt;3. DNS 解析域名&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-http-请求页面&quot;&gt;4. HTTP 请求页面&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 05:10:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E5%BA%94%E7%94%A8%E5%B1%82/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E5%BA%94%E7%94%A8%E5%B1%82/</guid>
        
        <category>学习</category>
        
        <category>网络</category>
        
        
      </item>
    
      <item>
        <title>网络模型及协议相关（传输层）</title>
        <description>&lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#udp-和-tcp-的特点&quot;&gt;UDP 和 TCP 的特点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#udp-首部格式&quot;&gt;UDP 首部格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-首部格式&quot;&gt;TCP 首部格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-的三次握手&quot;&gt;TCP 的三次握手&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-的四次挥手&quot;&gt;TCP 的四次挥手&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-可靠传输&quot;&gt;TCP 可靠传输&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-滑动窗口&quot;&gt;TCP 滑动窗口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-流量控制&quot;&gt;TCP 流量控制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp-拥塞控制&quot;&gt;TCP 拥塞控制&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-慢开始与拥塞避免&quot;&gt;1. 慢开始与拥塞避免&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-快重传与快恢复&quot;&gt;2. 快重传与快恢复&lt;/a&gt;
&lt;!-- GFM-TOC --&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。&lt;/p&gt;

&lt;h1 id=&quot;udp-和-tcp-的特点&quot;&gt;UDP 和 TCP 的特点&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;udp-首部格式&quot;&gt;UDP 首部格式&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。&lt;/p&gt;

&lt;h1 id=&quot;tcp-首部格式&quot;&gt;TCP 首部格式&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/55dc4e84-573d-4c13-a765-52ed1dd251f9.png&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;序号&lt;/strong&gt;  ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;确认号&lt;/strong&gt;  ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;  ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;确认 ACK&lt;/strong&gt;  ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;同步 SYN&lt;/strong&gt;  ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;终止 FIN&lt;/strong&gt;  ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;窗口&lt;/strong&gt;  ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tcp-的三次握手&quot;&gt;TCP 的三次握手&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e92d0ebc-7d46-413b-aec1-34a39602f787.png&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;假设 A 为客户端，B 为服务器端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B 收到 A 的确认后，连接建立。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。&lt;/p&gt;

&lt;p&gt;客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。&lt;/p&gt;

&lt;h1 id=&quot;tcp-的四次挥手&quot;&gt;TCP 的四次挥手&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A 发送连接释放报文，FIN=1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当 B 不再需要连接时，发送连接释放报文，FIN=1。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B 收到 A 的确认后释放连接。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;四次挥手的原因&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIME_WAIT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tcp-可靠传输&quot;&gt;TCP 可靠传输&lt;/h1&gt;

&lt;p&gt;TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。&lt;/p&gt;

&lt;p&gt;一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?RTTs=(1-a)\*(RTTs)+a*RTT&quot; class=&quot;mathjax-pic&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。&lt;/p&gt;

&lt;p&gt;超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?RTO=RTTs+4*RTT_d&quot; class=&quot;mathjax-pic&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 RTT&lt;sub&gt;d&lt;/sub&gt; 为偏差的加权平均值。&lt;/p&gt;

&lt;h1 id=&quot;tcp-滑动窗口&quot;&gt;TCP 滑动窗口&lt;/h1&gt;

&lt;p&gt;窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。&lt;/p&gt;

&lt;p&gt;发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。&lt;/p&gt;

&lt;p&gt;接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;tcp-流量控制&quot;&gt;TCP 流量控制&lt;/h1&gt;

&lt;p&gt;流量控制是为了控制发送方发送速率，保证接收方来得及接收。&lt;/p&gt;

&lt;p&gt;接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。&lt;/p&gt;

&lt;h1 id=&quot;tcp-拥塞控制&quot;&gt;TCP 拥塞控制&lt;/h1&gt;

&lt;p&gt;如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。&lt;/p&gt;

&lt;p&gt;发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。&lt;/p&gt;

&lt;p&gt;为了便于讨论，做如下假设：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接收方有足够大的接收缓存，因此不会发生流量控制；&lt;/li&gt;
  &lt;li&gt;虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/910f613f-514f-4534-87dd-9b4699d59d31.png&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-慢开始与拥塞避免&quot;&gt;1. 慢开始与拥塞避免&lt;/h2&gt;

&lt;p&gt;发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …&lt;/p&gt;

&lt;p&gt;注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &amp;gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。&lt;/p&gt;

&lt;p&gt;如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。&lt;/p&gt;

&lt;h2 id=&quot;2-快重传与快恢复&quot;&gt;2. 快重传与快恢复&lt;/h2&gt;

&lt;p&gt;在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M&lt;sub&gt;1&lt;/sub&gt; 和 M&lt;sub&gt;2&lt;/sub&gt;，此时收到 M&lt;sub&gt;4&lt;/sub&gt;，应当发送对 M&lt;sub&gt;2&lt;/sub&gt; 的确认。&lt;/p&gt;

&lt;p&gt;在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M&lt;sub&gt;2&lt;/sub&gt;，则 M&lt;sub&gt;3&lt;/sub&gt; 丢失，立即重传 M&lt;sub&gt;3&lt;/sub&gt;。&lt;/p&gt;

&lt;p&gt;在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。&lt;/p&gt;

&lt;p&gt;慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 04:50:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%BC%A0%E8%BE%93%E5%B1%82/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%BC%A0%E8%BE%93%E5%B1%82/</guid>
        
        <category>学习</category>
        
        <category>网络</category>
        
        
      </item>
    
      <item>
        <title>网络模型及协议相关（网络层）</title>
        <description>&lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ip-数据报格式&quot;&gt;IP 数据报格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ip-地址编址方式&quot;&gt;IP 地址编址方式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-分类&quot;&gt;1. 分类&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-子网划分&quot;&gt;2. 子网划分&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-无分类&quot;&gt;3. 无分类&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#地址解析协议-arp&quot;&gt;地址解析协议 ARP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#网际控制报文协议-icmp&quot;&gt;网际控制报文协议 ICMP&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-ping&quot;&gt;1. Ping&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-traceroute&quot;&gt;2. Traceroute&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#虚拟专用网-vpn&quot;&gt;虚拟专用网 VPN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#网络地址转换-nat&quot;&gt;网络地址转换 NAT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#路由器的结构&quot;&gt;路由器的结构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#路由器分组转发流程&quot;&gt;路由器分组转发流程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#路由选择协议&quot;&gt;路由选择协议&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-内部网关协议-rip&quot;&gt;1. 内部网关协议 RIP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-内部网关协议-ospf&quot;&gt;2. 内部网关协议 OSPF&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-外部网关协议-bgp&quot;&gt;3. 外部网关协议 BGP&lt;/a&gt;
&lt;!-- GFM-TOC --&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。&lt;/p&gt;

&lt;p&gt;使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/8d779ab7-ffcc-47c6-90ec-ede8260b2368.png&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;与 IP 协议配套使用的还有三个协议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;地址解析协议 ARP（Address Resolution Protocol）&lt;/li&gt;
  &lt;li&gt;网际控制报文协议 ICMP（Internet Control Message Protocol）&lt;/li&gt;
  &lt;li&gt;网际组管理协议 IGMP（Internet Group Management Protocol）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ip-数据报格式&quot;&gt;IP 数据报格式&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;版本&lt;/strong&gt;  : 有 4（IPv4）和 6（IPv6）两个值；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;首部长度&lt;/strong&gt;  : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;区分服务&lt;/strong&gt;  : 用来获得更好的服务，一般情况下不使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;总长度&lt;/strong&gt;  : 包括首部长度和数据部分长度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;生存时间&lt;/strong&gt;  ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;协议&lt;/strong&gt; ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;首部检验和&lt;/strong&gt; ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;标识&lt;/strong&gt;  : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;片偏移&lt;/strong&gt;  : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/23ba890e-e11c-45e2-a20c-64d217f83430.png&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ip-地址编址方式&quot;&gt;IP 地址编址方式&lt;/h1&gt;

&lt;p&gt;IP 地址的编址方式经历了三个历史阶段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分类&lt;/li&gt;
  &lt;li&gt;子网划分&lt;/li&gt;
  &lt;li&gt;无分类&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-分类&quot;&gt;1. 分类&lt;/h2&gt;

&lt;p&gt;由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。&lt;/p&gt;

&lt;p&gt;IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-子网划分&quot;&gt;2. 子网划分&lt;/h2&gt;

&lt;p&gt;通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。&lt;/p&gt;

&lt;p&gt;IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 子网号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}&lt;/p&gt;

&lt;p&gt;要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。&lt;/p&gt;

&lt;p&gt;注意，外部网络看不到子网的存在。&lt;/p&gt;

&lt;h2 id=&quot;3-无分类&quot;&gt;3. 无分类&lt;/h2&gt;

&lt;p&gt;无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。&lt;/p&gt;

&lt;p&gt;IP 地址 ::= {&amp;lt; 网络前缀号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}&lt;/p&gt;

&lt;p&gt;CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。&lt;/p&gt;

&lt;p&gt;CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。&lt;/p&gt;

&lt;p&gt;一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为  &lt;strong&gt;构成超网&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。&lt;/p&gt;

&lt;h1 id=&quot;地址解析协议-arp&quot;&gt;地址解析协议 ARP&lt;/h1&gt;

&lt;p&gt;网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ARP 实现由 IP 地址得到 MAC 地址。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。&lt;/p&gt;

&lt;p&gt;如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/8006a450-6c2f-498c-a928-c927f758b1d0.png&quot; width=&quot;700&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;网际控制报文协议-icmp&quot;&gt;网际控制报文协议 ICMP&lt;/h1&gt;

&lt;p&gt;ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e3124763-f75e-46c3-ba82-341e6c98d862.jpg&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ICMP 报文分为差错报告报文和询问报文。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/aa29cc88-7256-4399-8c7f-3cf4a6489559.png&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-ping&quot;&gt;1. Ping&lt;/h2&gt;

&lt;p&gt;Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。&lt;/p&gt;

&lt;p&gt;Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。&lt;/p&gt;

&lt;h2 id=&quot;2-traceroute&quot;&gt;2. Traceroute&lt;/h2&gt;

&lt;p&gt;Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。&lt;/p&gt;

&lt;p&gt;Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；&lt;/li&gt;
  &lt;li&gt;源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。&lt;/li&gt;
  &lt;li&gt;不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。&lt;/li&gt;
  &lt;li&gt;之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;虚拟专用网-vpn&quot;&gt;虚拟专用网 VPN&lt;/h1&gt;

&lt;p&gt;由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。&lt;/p&gt;

&lt;p&gt;有三个专用地址块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10.0.0.0 ~ 10.255.255.255&lt;/li&gt;
  &lt;li&gt;172.16.0.0 ~ 172.31.255.255&lt;/li&gt;
  &lt;li&gt;192.168.0.0 ~ 192.168.255.255&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。&lt;/p&gt;

&lt;p&gt;下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/1556770b-8c01-4681-af10-46f1df69202c.jpg&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;网络地址转换-nat&quot;&gt;网络地址转换 NAT&lt;/h1&gt;

&lt;p&gt;专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。&lt;/p&gt;

&lt;p&gt;在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/2719067e-b299-4639-9065-bed6729dbf0b.png&quot; width=&quot;&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;路由器的结构&quot;&gt;路由器的结构&lt;/h1&gt;

&lt;p&gt;路由器从功能上可以划分为：路由选择和分组转发。&lt;/p&gt;

&lt;p&gt;分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/c3369072-c740-43b0-b276-202bd1d3960d.jpg&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;路由器分组转发流程&quot;&gt;路由器分组转发流程&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。&lt;/li&gt;
  &lt;li&gt;若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；&lt;/li&gt;
  &lt;li&gt;若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；&lt;/li&gt;
  &lt;li&gt;若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；&lt;/li&gt;
  &lt;li&gt;若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；&lt;/li&gt;
  &lt;li&gt;报告转发分组出错。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/1ab49e39-012b-4383-8284-26570987e3c4.jpg&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;路由选择协议&quot;&gt;路由选择协议&lt;/h1&gt;

&lt;p&gt;路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。&lt;/p&gt;

&lt;p&gt;互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。&lt;/p&gt;

&lt;p&gt;可以把路由选择协议划分为两大类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自治系统内部的路由选择：RIP 和 OSPF&lt;/li&gt;
  &lt;li&gt;自治系统间的路由选择：BGP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-内部网关协议-rip&quot;&gt;1. 内部网关协议 RIP&lt;/h2&gt;

&lt;p&gt;RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。&lt;/p&gt;

&lt;p&gt;RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。&lt;/p&gt;

&lt;p&gt;距离向量算法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；&lt;/li&gt;
  &lt;li&gt;对修改后的 RIP 报文中的每一个项目，进行以下步骤：&lt;/li&gt;
  &lt;li&gt;若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；&lt;/li&gt;
  &lt;li&gt;否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。&lt;/li&gt;
  &lt;li&gt;若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。&lt;/p&gt;

&lt;h2 id=&quot;2-内部网关协议-ospf&quot;&gt;2. 内部网关协议 OSPF&lt;/h2&gt;

&lt;p&gt;开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。&lt;/p&gt;

&lt;p&gt;开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。&lt;/p&gt;

&lt;p&gt;OSPF 具有以下特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;向本自治系统中的所有路由器发送信息，这种方法是洪泛法。&lt;/li&gt;
  &lt;li&gt;发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。&lt;/li&gt;
  &lt;li&gt;只有当链路状态发生变化时，路由器才会发送信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。&lt;/p&gt;

&lt;h2 id=&quot;3-外部网关协议-bgp&quot;&gt;3. 外部网关协议 BGP&lt;/h2&gt;

&lt;p&gt;BGP（Border Gateway Protocol，边界网关协议）&lt;/p&gt;

&lt;p&gt;AS 之间的路由选择很困难，主要是由于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;互联网规模很大；&lt;/li&gt;
  &lt;li&gt;各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；&lt;/li&gt;
  &lt;li&gt;AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BGP 只能寻找一条比较好的路由，而不是最佳路由。&lt;/p&gt;

&lt;p&gt;每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/9cd0ae20-4fb5-4017-a000-f7d3a0eb3529.png&quot; width=&quot;600&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 04:30:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
        
        <category>学习</category>
        
        <category>网络</category>
        
        
      </item>
    
      <item>
        <title>网络模型及协议相关（链路层）</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#基本问题&quot;&gt;基本问题&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-封装成帧&quot;&gt;1. 封装成帧&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-透明传输&quot;&gt;2. 透明传输&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-差错检测&quot;&gt;3. 差错检测&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#信道分类&quot;&gt;信道分类&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-广播信道&quot;&gt;1. 广播信道&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-点对点信道&quot;&gt;2. 点对点信道&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#信道复用技术&quot;&gt;信道复用技术&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-频分复用&quot;&gt;1. 频分复用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-时分复用&quot;&gt;2. 时分复用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-统计时分复用&quot;&gt;3. 统计时分复用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-波分复用&quot;&gt;4. 波分复用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-码分复用&quot;&gt;5. 码分复用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#csmacd-协议&quot;&gt;CSMA/CD 协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ppp-协议&quot;&gt;PPP 协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mac-地址&quot;&gt;MAC 地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#局域网&quot;&gt;局域网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#以太网&quot;&gt;以太网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#交换机&quot;&gt;交换机&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#虚拟局域网&quot;&gt;虚拟局域网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;基本问题&quot;&gt;基本问题&lt;/h1&gt;

&lt;h2 id=&quot;1-封装成帧&quot;&gt;1. 封装成帧&lt;/h2&gt;

&lt;p&gt;将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/29a14735-e154-4f60-9a04-c9628e5d09f4.png&quot; width=&quot;300&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-透明传输&quot;&gt;2. 透明传输&lt;/h2&gt;

&lt;p&gt;透明表示一个实际存在的事物看起来好像不存在一样。&lt;/p&gt;

&lt;p&gt;帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e738a3d2-f42e-4755-ae13-ca23497e7a97.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-差错检测&quot;&gt;3. 差错检测&lt;/h2&gt;

&lt;p&gt;目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。&lt;/p&gt;

&lt;h1 id=&quot;信道分类&quot;&gt;信道分类&lt;/h1&gt;

&lt;h2 id=&quot;1-广播信道&quot;&gt;1. 广播信道&lt;/h2&gt;

&lt;p&gt;一对多通信，一个节点发送的数据能够被广播信道上所有的节点接收到。&lt;/p&gt;

&lt;p&gt;所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。&lt;/p&gt;

&lt;p&gt;主要有两种控制方法进行协调，一个是使用信道复用技术，一是使用 CSMA/CD 协议。&lt;/p&gt;

&lt;h2 id=&quot;2-点对点信道&quot;&gt;2. 点对点信道&lt;/h2&gt;

&lt;p&gt;一对一通信。&lt;/p&gt;

&lt;p&gt;因为不会发生碰撞，因此也比较简单，使用 PPP 协议进行控制。&lt;/p&gt;

&lt;h1 id=&quot;信道复用技术&quot;&gt;信道复用技术&lt;/h1&gt;

&lt;h2 id=&quot;1-频分复用&quot;&gt;1. 频分复用&lt;/h2&gt;

&lt;p&gt;频分复用的所有主机在相同的时间占用不同的频率带宽资源。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/4aa5e057-bc57-4719-ab57-c6fbc861c505.png&quot; width=&quot;350&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-时分复用&quot;&gt;2. 时分复用&lt;/h2&gt;

&lt;p&gt;时分复用的所有主机在不同的时间占用相同的频率带宽资源。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/67582ade-d44a-46a6-8757-3c1296cc1ef9.png&quot; width=&quot;350&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。&lt;/p&gt;

&lt;h2 id=&quot;3-统计时分复用&quot;&gt;3. 统计时分复用&lt;/h2&gt;

&lt;p&gt;是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/6283be2a-814a-4a10-84bf-9592533fe6bc.png&quot; width=&quot;350&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-波分复用&quot;&gt;4. 波分复用&lt;/h2&gt;

&lt;p&gt;光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。&lt;/p&gt;

&lt;h2 id=&quot;5-码分复用&quot;&gt;5. 码分复用&lt;/h2&gt;

&lt;p&gt;为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{S}&quot; class=&quot;mathjax-pic&quot; /&gt; 和 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{T}&quot; class=&quot;mathjax-pic&quot; /&gt; 有&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{T}=0&quot; class=&quot;mathjax-pic&quot;/&gt;&lt;/div&gt; &lt;br&gt; --&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/308a02e9-3346-4251-8c41-bd5536dab491.png&quot; width=&quot;100px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;为了讨论方便，取 m=8，设码片 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{S}&quot; class=&quot;mathjax-pic&quot; /&gt; 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。&lt;/p&gt;

&lt;p&gt;在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S}=1&quot; class=&quot;mathjax-pic&quot;/&gt;&lt;/div&gt; &lt;br&gt; --&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S'}=-1&quot; class=&quot;mathjax-pic&quot;/&gt;&lt;/div&gt; &lt;br&gt; --&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png&quot; width=&quot;100px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e325a903-f0b1-4fbd-82bf-88913dc2f290.png&quot; width=&quot;125px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{S'}&quot; class=&quot;mathjax-pic&quot; /&gt; 为 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{S}&quot; class=&quot;mathjax-pic&quot; /&gt; 的反码。&lt;/p&gt;

&lt;p&gt;利用上面的式子我们知道，当接收端使用码片 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?\vec{S}&quot; class=&quot;mathjax-pic&quot; /&gt; 对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。&lt;/p&gt;

&lt;p&gt;码分复用需要发送的数据量为原先的 m 倍。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/99b6060e-099d-4201-8e86-f8ab3768a7cf.png&quot; width=&quot;500px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;csmacd-协议&quot;&gt;CSMA/CD 协议&lt;/h1&gt;

&lt;p&gt;CSMA/CD 表示载波监听多点接入 / 碰撞检测。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;多点接入&lt;/strong&gt; ：说明这是总线型网络，许多主机以多点的方式连接到总线上。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;载波监听&lt;/strong&gt; ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;碰撞检测&lt;/strong&gt; ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为  &lt;strong&gt;争用期&lt;/strong&gt; 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。&lt;/p&gt;

&lt;p&gt;当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用  &lt;strong&gt;截断二进制指数退避算法&lt;/strong&gt;  来确定。从离散的整数集合 {0, 1, .., (2&lt;sup&gt;k&lt;/sup&gt;-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/19d423e9-74f7-4c2b-9b97-55890e0d5193.png&quot; width=&quot;400&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ppp-协议&quot;&gt;PPP 协议&lt;/h1&gt;

&lt;p&gt;互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg&quot; width=&quot;300&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PPP 的帧格式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;F 字段为帧的定界符&lt;/li&gt;
  &lt;li&gt;A 和 C 字段暂时没有意义&lt;/li&gt;
  &lt;li&gt;FCS 字段是使用 CRC 的检验序列&lt;/li&gt;
  &lt;li&gt;信息部分的长度不超过 1500&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/759013d7-61d8-4509-897a-d75af598a236.png&quot; width=&quot;400&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;mac-地址&quot;&gt;MAC 地址&lt;/h1&gt;

&lt;p&gt;MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。&lt;/p&gt;

&lt;p&gt;一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。&lt;/p&gt;

&lt;h1 id=&quot;局域网&quot;&gt;局域网&lt;/h1&gt;

&lt;p&gt;局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。&lt;/p&gt;

&lt;p&gt;主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。&lt;/p&gt;

&lt;p&gt;可以按照网络拓扑结构对局域网进行分类：&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;以太网&quot;&gt;以太网&lt;/h1&gt;

&lt;p&gt;以太网是一种星型拓扑结构局域网。&lt;/p&gt;

&lt;p&gt;早期使用集线器进行连接，集线器是一种物理层设备， 作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其它所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。&lt;/p&gt;

&lt;p&gt;目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。&lt;/p&gt;

&lt;p&gt;以太网帧格式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt; ：标记上层使用的协议；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt; ：长度在 46-1500 之间，如果太小则需要填充；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FCS&lt;/strong&gt; ：帧检验序列，使用的是 CRC 检验方法；&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/164944d3-bbd2-4bb2-924b-e62199c51b90.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;交换机&quot;&gt;交换机&lt;/h1&gt;

&lt;p&gt;交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。&lt;/p&gt;

&lt;p&gt;正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。&lt;/p&gt;

&lt;p&gt;下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/a4444545-0d68-4015-9a3d-19209dc436b3.png&quot; width=&quot;800&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;虚拟局域网&quot;&gt;虚拟局域网&lt;/h1&gt;

&lt;p&gt;虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。&lt;/p&gt;

&lt;p&gt;例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。&lt;/p&gt;

&lt;p&gt;使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/e98e9d20-206b-4533-bacf-3448d0096f38.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 04:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%BA%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/10/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%BA%8C/</guid>
        
        <category>学习</category>
        
        <category>网络</category>
        
        
      </item>
    
      <item>
        <title>网络模型及协议相关（概述）</title>
        <description>&lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#网络的网络&quot;&gt;网络的网络&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#isp&quot;&gt;ISP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#主机之间的通信方式&quot;&gt;主机之间的通信方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#电路交换与分组交换&quot;&gt;电路交换与分组交换&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-电路交换&quot;&gt;1. 电路交换&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-分组交换&quot;&gt;2. 分组交换&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#时延&quot;&gt;时延&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-排队时延&quot;&gt;1. 排队时延&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-处理时延&quot;&gt;2. 处理时延&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-传输时延&quot;&gt;3. 传输时延&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-传播时延&quot;&gt;4. 传播时延&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#计算机网络体系结构&quot;&gt;计算机网络体系结构&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-五层协议&quot;&gt;1. 五层协议&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-osi&quot;&gt;2. OSI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-tcpip&quot;&gt;3. TCP/IP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-数据在各层之间的传递过程&quot;&gt;4. 数据在各层之间的传递过程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#物理层&quot;&gt;物理层&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-通信方式&quot;&gt;1. 通信方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-带通调制&quot;&gt;2. 带通调制&lt;/a&gt;
&lt;!-- GFM-TOC --&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;网络的网络&quot;&gt;网络的网络&lt;/h1&gt;

&lt;p&gt;网络把主机连接起来，而互联网是把多种不同的网络连接起来，因此互联网是网络的网络。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/network-of-networks.gif&quot; width=&quot;450&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;isp&quot;&gt;ISP&lt;/h1&gt;

&lt;p&gt;互联网服务提供商 ISP 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等联网设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/72be01cd-41ae-45f7-99b9-a8d284e44dd4.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;目前的互联网是一种多层次 ISP 结构，ISP 根据覆盖面积的大小分为第一层 ISP、区域 ISP 和接入 ISP。互联网交换点 IXP 允许两个 ISP 直接相连而不用经过第三个 ISP。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/3be42601-9d33-4d29-8358-a9d16453af93.png&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;主机之间的通信方式&quot;&gt;主机之间的通信方式&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;客户-服务器（C/S）：客户是服务的请求方，服务器是服务的提供方。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/914894c2-0bc4-46b5-bef9-0316a69ef521.jpg&quot; width=&quot;240px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对等（P2P）：不区分客户和服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/42430e94-3137-48c0-bdb6-3cebaf9102e3.jpg&quot; width=&quot;200px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;电路交换与分组交换&quot;&gt;电路交换与分组交换&lt;/h1&gt;

&lt;h2 id=&quot;1-电路交换&quot;&gt;1. 电路交换&lt;/h2&gt;

&lt;p&gt;电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。&lt;/p&gt;

&lt;h2 id=&quot;2-分组交换&quot;&gt;2. 分组交换&lt;/h2&gt;

&lt;p&gt;每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换不需要占用传输线路。&lt;/p&gt;

&lt;p&gt;在一个邮局通信系统中，邮局收到一份邮件之后，先存储下来，然后把相同目的地的邮件一起转发到下一个目的地，这个过程就是存储转发过程，分组交换也使用了存储转发过程。&lt;/p&gt;

&lt;h1 id=&quot;时延&quot;&gt;时延&lt;/h1&gt;

&lt;p&gt;总时延 = 排队时延 + 处理时延 + 传输时延 + 传播时延&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/4b2ae78c-e254-44df-9e37-578e2f2bef52.jpg&quot; width=&quot;380&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-排队时延&quot;&gt;1. 排队时延&lt;/h2&gt;

&lt;p&gt;分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。&lt;/p&gt;

&lt;h2 id=&quot;2-处理时延&quot;&gt;2. 处理时延&lt;/h2&gt;

&lt;p&gt;主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据、进行差错检验或查找适当的路由等。&lt;/p&gt;

&lt;h2 id=&quot;3-传输时延&quot;&gt;3. 传输时延&lt;/h2&gt;

&lt;p&gt;主机或路由器传输数据帧所需要的时间。&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?delay=\frac{l(bit)}{v(bit/s)}&quot; class=&quot;mathjax-pic&quot;/&gt;&lt;/div&gt; &lt;br&gt; --&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/dcdbb96c-9077-4121-aeb8-743e54ac02a4.png&quot; width=&quot;150px&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 l 表示数据帧的长度，v 表示传输速率。&lt;/p&gt;

&lt;h2 id=&quot;4-传播时延&quot;&gt;4. 传播时延&lt;/h2&gt;

&lt;p&gt;电磁波在信道中传播所需要花费的时间，电磁波传播的速度接近光速。&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?delay=\frac{l(m)}{v(m/s)}&quot; class=&quot;mathjax-pic&quot;/&gt;&lt;/div&gt; &lt;br&gt; --&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/a1616dac-0e12-40b2-827d-9e3f7f0b940d.png&quot; width=&quot;150&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其中 l 表示信道长度，v 表示电磁波在信道上的传播速度。&lt;/p&gt;

&lt;h1 id=&quot;计算机网络体系结构&quot;&gt;计算机网络体系结构&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png&quot; width=&quot;450&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-五层协议&quot;&gt;1. 五层协议&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;应用层&lt;/strong&gt; ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;传输层&lt;/strong&gt; ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;网络层&lt;/strong&gt; ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据链路层&lt;/strong&gt; ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;物理层&lt;/strong&gt; ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-osi&quot;&gt;2. OSI&lt;/h2&gt;

&lt;p&gt;其中表示层和会话层用途如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;表示层&lt;/strong&gt; ：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;会话层&lt;/strong&gt; ：建立及管理会话。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。&lt;/p&gt;

&lt;h2 id=&quot;3-tcpip&quot;&gt;3. TCP/IP&lt;/h2&gt;

&lt;p&gt;它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。&lt;/p&gt;

&lt;p&gt;TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/48d79be8-085b-4862-8a9d-18402eb93b31.png&quot; width=&quot;250&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-数据在各层之间的传递过程&quot;&gt;4. 数据在各层之间的传递过程&lt;/h2&gt;

&lt;p&gt;在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。&lt;/p&gt;

&lt;p&gt;路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。&lt;/p&gt;

&lt;!-- #### 网络五层模型 --&gt;
&lt;h1 id=&quot;物理层&quot;&gt;物理层&lt;/h1&gt;
&lt;h2 id=&quot;1-通信方式&quot;&gt;1. 通信方式&lt;/h2&gt;
&lt;p&gt;根据信息在传输线上的传送方向，分为以下三种通信方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单工通信：单向传输&lt;/li&gt;
  &lt;li&gt;半双工通信：双向交替传输&lt;/li&gt;
  &lt;li&gt;全双工通信：双向同时传输&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-带通调制&quot;&gt;2. 带通调制&lt;/h2&gt;
&lt;p&gt;模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;/pics/c34f4503-f62c-4043-9dc6-3e03288657df.jpg&quot; width=&quot;500&quot; /&gt; &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Sep 2019 04:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/09/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%B8%80/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/09/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3-%E4%B8%80/</guid>
        
        <category>学习</category>
        
        <category>网络</category>
        
        
      </item>
    
      <item>
        <title>python编码问题</title>
        <description>&lt;h3 id=&quot;常用编码&quot;&gt;常用编码&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;ASCII编码：   &lt;br /&gt;
 8个比特作为一个字节（byte）&lt;/li&gt;
  &lt;li&gt;Unicode编码： &lt;br /&gt;
 常用的是2个字节表示一个字符，所以用Unicode编码比ASCII编码要多一倍的存储空间。&lt;/li&gt;
  &lt;li&gt;UTF-8编码（可变长编码）： &lt;br /&gt;
 UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编译成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字符。&lt;/li&gt;
  &lt;li&gt;GB2312简体中文编码： &lt;br /&gt;
 一个汉字占用2个字节，该编码遇到繁体中文、日文、韩文时，这些文字内容无法被正确编码。&lt;/li&gt;
  &lt;li&gt;BIG5繁体中文编码： &lt;br /&gt;
 在台湾地区使用。&lt;/li&gt;
  &lt;li&gt;GBK编码： &lt;br /&gt;
 支持简体及繁体中文，但对他国非拉丁字母还有问题。可以表示21886个字符。&lt;/li&gt;
  &lt;li&gt;GB18030字符集： &lt;br /&gt;
 解决了中文、日文、朝鲜语系的编码，兼容GBK，可以表示27484个文字。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ep:
字符      ASCII           Unicode                    UTF-8
 A      01000001     00000000 01000001             01000001
 中        X         01001110 00101101     11100100 10111000 10101101
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;编码原理&quot;&gt;编码原理&lt;/h3&gt;
    &lt;p&gt;  在计算机内存中，统一使用&lt;strong&gt;Unicode&lt;/strong&gt;编码，当需要保存到硬盘或需要传输的时候，就转换为UTF-8编码。 &lt;br /&gt;
以记事本为例：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;                           Unicode编码
                 ↗                           |
                 |                           ↘
             读取，转换为Unicode         保存，转换为UTF-8编码
                 ↗                           |
                 |                           |
               txt文件                     txt文件
                 ↗                           |
                 |                           ↘
                             UTF-8编码
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;编码介绍&quot;&gt;编码介绍&lt;/h3&gt;
    &lt;p&gt;1.ANSI–&amp;gt; ASCII 用于保存英文文字 &lt;br /&gt;
  一个字节，共有8个比特位，有256个字符，其中ASCII使用了127个，用于表示所有的空格、标点符号、数字、大小写字母。 &lt;br /&gt;
  采用127号之后的空位来表示这些新的字母、符号，加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了 最后一个状态255。从128到255这一页的字符集被称”扩展字符集。 &lt;br /&gt;
2.GB2312（扩展了ANSI） &lt;br /&gt;
  用两个字节表示，一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了 &lt;br /&gt;
3.GBK（扩展了GB2312） &lt;br /&gt;
  GBK不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。后来少数民族也要用电脑了，我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。 &lt;br /&gt;
4.Unicode(统一规范) &lt;br /&gt;
  一律使用2个字节，即16位统一表示所有的字符。 &lt;br /&gt;
Unicode与UTF-8编码转换规则&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Unicode               --&amp;gt;            UTF-8
0000 – 007F                            0xxxxxxx                    1个字节
0080 – 07FF                       110xxxxx 10xxxxxx                2个字节
0800 – FFFF                    1110xxxx 10xxxxxx 10xxxxxx          3个字节
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;举例说明该转换规则： &lt;br /&gt;
  汉字‘汉’的Unicode编码对应是6C49，在6C49位于0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;                            6C49
                       0800&amp;lt;6C49&amp;lt;FFFF
             模版：1110xxxx 10xxxxxx 10xxxxxx
                            6C49         Unicode编码
                             |
               0110    1100   0100    1001
                             |
                 0110    110001     001001
                             |  带入模版，替换X
             11100110    10110001    10001001
                             |
           1110    0110   1011   0001   1000   1001
                             |
                     E6     B1     89      UTF-8编码
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;python编码&quot;&gt;python编码&lt;/h3&gt;
    &lt;p&gt;  字符串在Python内部的表示是&lt;strong&gt;unicode&lt;/strong&gt;编码，因此，在做编码转换时，通常需要以unicode作为中间编码，即现将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另外一种编码。原有编码–&amp;gt;内部编码Unicode–&amp;gt;目标编码  &lt;br /&gt;
  &lt;strong&gt;decode&lt;/strong&gt;的作用是将其他编码的字符串转换成unicode编码，如str1.decode(‘gb2312’)，表示将gb2312编码的字符串转换成unicode编码。 &lt;br /&gt;
  &lt;strong&gt;encode&lt;/strong&gt;的作用是将unicode编码转换成其他编码的字符串，如str2.encode(‘gb2312’)，表示将unicode编码的字符串转换成gb2312编码。 &lt;br /&gt;
over&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 07 Sep 2019 02:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/07/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/07/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
        
        <category>学习</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>centos7下常用开发环境的搭建</title>
        <description>&lt;p&gt;  在安装开发环境之前，建议用户首先进行linux中已安装软件包的更新，执行下面命令进行更新（必须联网），更新时间可能会比较久，需要等待一段时间。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum update
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;cc环境&quot;&gt;C、C++环境&lt;/h4&gt;
&lt;p&gt;  服务器中安装的很多工具包都需要c语言和c++语言的环境支持，所以在服务器上部署其他服务之前首先进行c语言和c++语言的环境安装。&lt;br /&gt;
C环境：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum -y install gcc  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;C++环境：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum -y install gcc-c++ libstdc++-devel
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;python环境&quot;&gt;python环境&lt;/h4&gt;
&lt;p&gt;  centos系统都预装有python2.7环境，所以在这里就不进行介绍python环境的安装，如果需要的话请参考python官网：https://www.python.org/downloads/。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1. 安装epel扩展源   
yum -y install epel-release
2. 更新成功之后，安装python包管理工具pip   
yum -y install python-pip
3. 安装后清理cache   
yum clean all
4. 安装包失败可执行如下更新命令（更新pip工具）   
pip install --upgrade pip  
5. 安装python开发环境   
yum -y install python-devel  
yum -y install libevent-devel  
yum -y install gevent
yum -y install groupinstall 'development tools'  
6. 升级setuptools   
pip install --upgrade setuptools
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;  python常用的web开发框架Django及扩展包安装&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1. 安装Django   
pip install django  
2. 安装django跨域使用扩展包corsheaders   
pip install django-cors-middleware  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;java环境&quot;&gt;java环境&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;下载jdk安装包，下载地址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;br /&gt;
或者在服务器上执行下面命令：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;wget http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz?AuthParam=1531155951_4e06a4d17c6c1dbfb8440352e19dd2ae
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;该下载地址已失效 请自行在官网复制下载地址&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;下载好jdk-8u171-linux-x64.tar.gz安装包后，将安装包放在centos服务器中，&lt;/li&gt;
  &lt;li&gt;在服务器上创建安装目录 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /usr/local/java/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将安装包解压至安装目录 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/java/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;设置环境变量，打开文件/etc/profile，在文件末行插入下面信息后保存。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;export JAVA_HOME=/usr/local/java/jdk1.8.0_171
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;执行下面命令使配置生效 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加软链接 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;检查是否安装成功 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;
    &lt;h4 id=&quot;docker环境&quot;&gt;docker环境&lt;/h4&gt;
    &lt;p&gt;1.安装docker &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install docker&lt;/code&gt; &lt;br /&gt;
2.设置系统启动自动加载 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;service docker start&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig docker on&lt;/code&gt; &lt;br /&gt;
3.docker容器中文编码解决方案&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1.
vi /etc/profile
export LANG = en_US.UTF-8
用该方法设置之后，每次启动容器之后都要执行一次source /etc/profile命令使配置生效。

2.
vi /root/.bashrc
export LANG = en_US.UTF-8
用该方法设置之后，不需要在容器启动后执行配置激活命令。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4.清理docker容器日志 &lt;br /&gt;
(1) &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect 容器id或容器名&lt;/code&gt;  &lt;br /&gt;
(2)找到log文件所在的位置，一般为/var/log/—-/log-json.log &lt;br /&gt;
(3)执行命令清理日志： &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /dev/null &amp;gt; /var/log/----/log-json.log&lt;/code&gt; &lt;br /&gt;
over&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Sep 2019 04:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/05/centos7%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/05/centos7%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
        
        <category>学习</category>
        
        <category>centos</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>docker存储管理</title>
        <description>&lt;h4 id=&quot;docker-volume形态&quot;&gt;Docker volume形态&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;volume介绍&lt;br /&gt;
  Docker 采用 AFUS 分层文件系统时，文件系统的改动都是发生在最上面的容器层，在容器的生命周期内，它是持续的，包括容器在被停止后。但是，当容器被删除后，该数据层也随之被删除了。因此，Docker 采用 volume （卷）的形式来向容器提供持久化存储.Docker volume 有如下几种形态：&lt;br /&gt;
1.1 默认，即无Docker volume&lt;br /&gt;
  默认情况下，容器不使用任何 volume，此时，容器的数据被保存在容器之内，它只在容器的生命周期内存在，会随着容器的被删除而被删除。当然，也可以使用 docker commit 命令将它持久化为一个新的镜像。&lt;br /&gt;
1.2 Data volume （数据卷） &lt;br /&gt;
  一个 data volume 是容器中绕过 Union 文件系统的一个特定的目录。它被设计用来保存数据，而不管容器的生命周期。因此，当你删除一个容器时，Docker 肯定不会自动地删除一个volume。&lt;br /&gt;
（1）使用 “-v 容器内目录” 形式&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -P --name web -v /webapp training/webapp python app.py&lt;/code&gt;&lt;br /&gt;
使用 docker inspect 命令可以看出，Docker 将本地一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt; 目录 mount 为容器内的 webapp 目录了：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&quot;Mounts&quot;: [
         {
             &quot;Name&quot;: &quot;f143b7f379fb6d012a08656fc950bf6df4bf5a5b90c72f310644aa997620122b&quot;,
             &quot;Source&quot;: &quot;/var/lib/docker/volumes/f143b7f379fb6d012a08656fc950bf6df4bf5a5b90c72f310644aa997620122b/_data&quot;,
             &quot;Destination&quot;: &quot;/webapp&quot;,
             &quot;Driver&quot;: &quot;local&quot;,
             &quot;Mode&quot;: &quot;&quot;,
             &quot;RW&quot;: true,
             &quot;Propagation&quot;: &quot;&quot;
         }
     ],  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;其实，在 web 容器被删除后，&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/docker/volumes/f143b7f379fb6d012a08656fc950bf6df4bf5a5b90c72f310644aa997620122b/_data&lt;/code&gt;目录及其中的内容都还会保留下来，但是，新启动的容器无法再使用这个目录，也就是说，已有的数据不能自动地被重复使用了。&lt;br /&gt;
（2）使用 -v 来挂载一个主机上的目录到容器的目录&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -P --name web2 -v /src/webapp:/webapp training/webapp python app.py&lt;/code&gt;&lt;br /&gt;
主机上的目录可以是一个本地目录，也可以在一个 NFS share 内，或者在一个已经格式化好了的块设备上。其实这种形式和第一种没有本质的区别，容器内对 /webapp 的操作都会反映到主机上的 /src/webapp 目录内。只是，重新启动容器时，可以再次使用同样的方式来将 /src/webapp 目录挂载到新的容器内，这样就可以实现数据持久化的目标。&lt;br /&gt;
（3）使用 -v 来挂载主机上的一个文件到容器内的一个文件&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --rm -it -v ~/.bash_history:/root/.bash_history ubuntu /bin/bash&lt;/code&gt;&lt;br /&gt;
1.3 data container（数据卷容器）&lt;br /&gt;
  如果要在容器之间共享数据，最好是使用 data container。这种 container 中不会跑应用，而只是挂载一个卷。&lt;br /&gt;
创建一个 data container：&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker create -v /dbdata --name dbstore training/webapp  /bin/true&lt;/code&gt;&lt;br /&gt;
启动一个 app container：&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -P --name web3 --volumes-from dbstore training/webapp python app.py&lt;/code&gt;&lt;br /&gt;
其实，对 web3 这个容器来说，volume 的本质没变，它只是将 dbstore 容器的 /dbdata 目录映射的主机上的目录映射到自身的 /dbdata 目录。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&quot;Mounts&quot;: [
         {
             &quot;Name&quot;: &quot;5341c03f3b94f13f4c86d88ccb0f3b63487adf30dea7ae6b2d06e947235e7330&quot;,
             &quot;Source&quot;: &quot;/var/lib/docker/volumes/5341c03f3b94f13f4c86d88ccb0f3b63487adf30dea7ae6b2d06e947235e7330/_data&quot;,
             &quot;Destination&quot;: &quot;/dbdata&quot;,
             &quot;Driver&quot;: &quot;local&quot;,
             &quot;Mode&quot;: &quot;&quot;,
             &quot;RW&quot;: true,
             &quot;Propagation&quot;: &quot;&quot;
         }
     ],
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 19 Mar 2019 05:30:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/19/docker%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/19/docker%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid>
        
        <category>学习</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>docker容器可视化管理</title>
        <description>&lt;h4 id=&quot;docker-ui&quot;&gt;docker UI&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;优点：&lt;br /&gt;
  支持容器批量操作&lt;br /&gt;
  支持镜像管理&lt;/li&gt;
  &lt;li&gt;缺点：&lt;br /&gt;
  不支持多主机&lt;/li&gt;
  &lt;li&gt;部署：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull uifd/ui-for-docker&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -it -d --name docker-web -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock docker.io/uifd/ui-for-docker&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;访问：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.177.11:9000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;shipyard&quot;&gt;shipyard&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;介绍
shipyard是在docker swarm实现对容器、镜像、集群、仓库、节点进行管理的web系统。&lt;br /&gt;
shipyard包含以下容器及启动顺序：&lt;br /&gt;
（1）RethinkDB  作为数据库保存用户等信息&lt;br /&gt;
（2）Discovery  一个外部的密码值存储容器&lt;br /&gt;
（3）shipyard_certs  证书管理容器，实现证书验证功能&lt;br /&gt;
（4）proxy  使用TLS转发请求从TCP到docker监听的socket&lt;br /&gt;
（5）swarm manager  swarm管理器&lt;br /&gt;
（6）swarm agent swarm代理，运行在每个节点上&lt;br /&gt;
（7）controller  shipyard控制器，Remote API和web的实现。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;部署&lt;br /&gt;
脚本：shipyard-deploy&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;chmod 755 shipyard-deploy
sh shipyard-deploy   此时会创建以上七个容器，在浏览器访问8080端口即可看到shipyard登陆界面，登录用户名是admin，密码是shipyard
修改web访问端口：
cat shipyard-deploy | grep 8080
sed -i 's|8080|80|g' shipyard-deploy
重新部署
sh shipyard-deploy
删除shipyard环境
cat shipyard-delpoy | ACTION = remove bash
添加其他节点主机，在节点主机上操作
cat shipyard-deploy | ACTION = node DISCOVERY = etcd://192.168.177.11:4001 bash
删除节点机
cat shipyard-deploy | ACTION = remove bash -s
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;portainer&quot;&gt;portainer&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;下载镜像&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull portainer/portainer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;单机运行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 9000:9000 --restart = always -v /var/run/docker.sock:/var/run/docker.sock --name portainer-test portainer/portainer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;集群运行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 9000:9000 --restart = always --name portainer-test portainer/portainer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 22 Feb 2019 17:30:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/22/docker%E5%AE%B9%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/22/docker%E5%AE%B9%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86/</guid>
        
        <category>学习</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>centos7下service(systemctl)的配置</title>
        <description>&lt;h4 id=&quot;service介绍&quot;&gt;service介绍&lt;/h4&gt;
&lt;p&gt;  service命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等。
在centos7之前，系统启动服务使用&lt;code class=&quot;highlighter-rouge&quot;&gt;service https start&lt;/code&gt;的方式启动，此时其实是启动了存放在/etc/init.d目录下的脚本，在centos7中，服务管理修改了规则，centos7集成了RHEL 7的新的特性，例如强大的systemctl，而systemctl的使用也使得以往系统服务的/etc/init.d的启动脚本的方式就此改变，也大幅提高了系统服务的运行效率。但服务的配置和以往也发生了极大的不同，说实在的，变的简单而易用了许多。&lt;/p&gt;
&lt;h4 id=&quot;service配置&quot;&gt;service配置&lt;/h4&gt;
&lt;p&gt;  centos7的服务配置文件默认位置在/usr/lib/systemd目录下，有系统和用户之分，需要开机不登录就能运行的程序，在系统服务里，即/usr/lib/systemd/system目录下。&lt;br /&gt;
  每一个服务均以.service结尾，文件分为三部分，[Unit], [Service]和[Install]，完成脚本后，以754权限保存在以上目录。&lt;br /&gt;
  以下为MongoDB集群的一个分片shard配置的服务示例mongo_shard1.service:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[Unit]
Description = mongodb service:shard1 Primary
After = syslog.target  network.target

[Service]
Type = forking
ExecStart = /usr/bin/mongod -f /data/config/primary.conf
ExecStop = /bin/kill -2 $MAINPID
KillMode = process
Restart = on-failure
User = root
Group = root

[Install]
WantedBy = multi-user.target
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;service启动&quot;&gt;service启动&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;启动&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start mongo_shard1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;设置开启自启&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable mongo_shard1&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;../../../../img/404-bg.jpg&quot; style=&quot;width:50%&quot; /&gt;
&lt;img src=&quot;../../../../img/404-bg.jpg&quot; alt=&quot;hello&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 22 Feb 2019 16:30:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/22/centos7%E4%B8%8Bservice(systemctl)%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/22/centos7%E4%B8%8Bservice(systemctl)%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
        
        <category>学习</category>
        
        <category>centos7</category>
        
        
      </item>
    
  </channel>
</rss>
